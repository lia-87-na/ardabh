require('dotenv').config();
const express = require('express');
const cors = require('cors');
const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const mongoose = require("mongoose");
const bcrypt = require('bcrypt');

const app = express();
const PORT = process.env.PORT || 5000;

const backupPath = path.join(__dirname, 'backup.json');

app.use(cors());
app.use(express.json());

// ======== MongoDB ’¥’´’°÷Å’∏÷Ç’¥ ======== //
const mongoURI = process.env.MONGO_URI;

const AdminSchema = new mongoose.Schema({
    username: String,
    password: String,
});

const Admin = mongoose.model('Admin', AdminSchema);

mongoose.connect(mongoURI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
}).then(async () => {
    console.log("‚úÖ MongoDB ’¥’´’°÷Å’æ’°’Æ ’ß");

    const username = 'adminArda';
    const plainPassword = 'arda2025';

    const exists = await Admin.findOne({ username });
    if (exists) {
        console.log("‚ÑπÔ∏è ‘±’§’¥’´’∂’® ’°÷Ä’§’•’∂ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´÷â");
    } else {
        const hashed = await bcrypt.hash(plainPassword, 10);
        await Admin.create({ username, password: hashed });
        console.log("‚úÖ ‘±’§’¥’´’∂’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’Ω’ø’•’≤’Æ’æ’•÷Å÷â");
    }

}).catch((err) => console.error("‚ùå Mongo ’¥’´’°÷Å’¥’°’∂ ’Ω’≠’°’¨:", err));

// ======== ‘±’§’¥’´’∂’´ ’¥’∏÷Ç’ø÷Ñ ======== //
app.post('/api/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const admin = await Admin.findOne({ username });

        if (!admin) {
            return res.status(401).json({ success: false, message: '’ï’£’ø’°’ø’•÷Ä’® ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’π’∏÷Ç’∂’´' });
        }

        const isMatch = await bcrypt.compare(password, admin.password);

        if (!isMatch) {
            return res.status(401).json({ success: false, message: '’ç’≠’°’¨ ’£’°’≤’ø’∂’°’¢’°’º' });
        }

        return res.json({ success: true });
    } catch (err) {
        console.error(err);
        return res.status(500).json({ success: false, message: '’ç’•÷Ä’æ’•÷Ä’´ ’Ω’≠’°’¨' });
    }
});

// ======== Nodemailer ’Ø’∏’∂÷Ü’´’£’∏÷Ç÷Ä’°÷Å’´’° ======== //
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
    },
});

// ======== ‘≥÷Ä’°’∂÷Å’∏÷Ç’¥ ======== //
app.post('/api/register', async (req, res) => {
    const { name, specialty, phone, email } = req.body;

    if (!name || !specialty || !phone || !email) {
        return res.status(400).json({ message: '‘≤’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’® ’∫’°÷Ä’ø’°’§’´÷Ä ’•’∂÷â' });
    }
    if (name.trim().length < 3) {
        return res.status(400).json({ message: '‘±’∂’∏÷Ç’∂’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’°’º’∂’æ’°’¶’∂ 3 ’∂’´’∑÷â' });
    }
    if (!/^[0-9]{8,12}$/.test(phone)) {
        return res.status(400).json({ message: '’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’® ’∫’•’ø÷Ñ ’ß ’∫’°÷Ä’∏÷Ç’∂’°’Ø’´ ’¥’´’°’µ’∂ ’©’æ’•÷Ä ÷á ’¨’´’∂’´ 8-12 ’∂’´’∑÷â' });
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        return res.status(400).json({ message: '‘∑’¨‚Ä§ ’∞’°’Ω÷Å’•’∂ ’æ’°’æ’•÷Ä ’π’ß÷â' });
    }

    const entry = { name, specialty, phone, email, timestamp: new Date().toISOString() };

    try {
        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: email,
            subject: '’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’£÷Ä’°’∂÷Å’¥’°’∂ ’∞’°’¥’°÷Ä',
            text: `‘≤’°÷Ä÷á, ${name}÷â\n\n’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ARDA ’Ø’•’∂’ø÷Ä’∏’∂’∏÷Ç’¥ ’£÷Ä’°’∂÷Å’æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â\n\nüìå ’Ñ’°’Ω’∂’°’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂’ù ${specialty}\nüìû ’Ä’•’º’°’≠’∏’Ω’ù ${phone}\n\n’Ä’°÷Ä’£’°’∂÷Ñ’∂’•÷Ä’∏’æ’ù\nARDA ’©’´’¥÷â`
        });

        await transporter.sendMail({
            from: process.env.EMAIL_USER,
            to: process.env.NOTIFY_EMAIL,
            subject: '’Ü’∏÷Ä ’£÷Ä’°’∂÷Å’∏÷Ç’¥ ARDA ’Ø’•’∂’ø÷Ä’∏’∂’∏÷Ç’¥',
            text: `üì• ’Ü’∏÷Ä ’£÷Ä’°’∂÷Å’∏÷Ç’¥\n\nüë§ ‘±’∂’∏÷Ç’∂’ù ${name}\nüìå ’Ñ’°’Ω’∂’°’£’´’ø’∏÷Ç’©’µ’∏÷Ç’∂’ù ${specialty}\nüìû ’Ä’•’º’°’≠’∏’Ω’ù ${phone}\nüìß ‘∑’¨‚Ä§ ’∞’°’Ω÷Å’•’ù ${email}`
        });

        let existing = fs.existsSync(backupPath) ? JSON.parse(fs.readFileSync(backupPath, 'utf-8')) : [];
        existing.push(entry);
        fs.writeFileSync(backupPath, JSON.stringify(existing, null, 2));

        res.status(200).json({ message: '‘≥÷Ä’°’∂÷Å’∏÷Ç’¥’∂ ’∞’°’ª’∏’≤’æ’•÷Å÷â' });
    } catch (err) {
        console.error('Email Error:', err);
        try {
            let existing = fs.existsSync(backupPath) ? JSON.parse(fs.readFileSync(backupPath, 'utf-8')) : [];
            existing.push(entry);
            fs.writeFileSync(backupPath, JSON.stringify(existing, null, 2));
            res.status(200).json({ message: 'Email-’® ’π’∞’°’ª’∏’≤’æ’•÷Å, ’¢’°’µ÷Å ’ø’æ’µ’°’¨’∂’•÷Ä’® ’∫’°’∞’∫’°’∂’æ’•÷Å’´’∂÷â' });
        } catch (fileErr) {
            console.error('File write error:', fileErr);
            res.status(500).json({ message: '’â’∞’°’ª’∏’≤’æ’•÷Å ’∫’°’∞’∫’°’∂’•’¨ ’ø’æ’µ’°’¨’∂’•÷Ä’®÷â' });
        }
    }
});

// ======== ‘ø’°’∫’´ ’±÷á’°’©’∏÷Ç’≤’© ======== //
app.post('/api/contact', async (req, res) => {
    const { name, email, message } = req.body;

    if (!name || !email || !message) {
        return res.status(400).json({ message: '‘≤’∏’¨’∏÷Ä ’§’°’∑’ø’•÷Ä’® ’∫’°÷Ä’ø’°’§’´÷Ä ’•’∂÷â' });
    }

    try {
        await transporter.sendMail({
            from: `"${name}" <${email}>`,
            to: process.env.NOTIFY_EMAIL,
            subject: '’Ü’∏÷Ä ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’Ø’°’µ÷Ñ’´÷Å',
            html: `<p><strong>‘±’∂’∏÷Ç’∂:</strong> ${name}</p><p><strong>‘∑’¨‚Ä§ ÷É’∏’Ω’ø:</strong> ${email}</p><p><strong>’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂:</strong><br/>${message}</p>`
        });

        await transporter.sendMail({
            from: process.env.NOTIFY_EMAIL,
            to: email,
            subject: '’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’Ø’°’∫’´ ’∞’°’¥’°÷Ä',
            html: `<p>‘≤’°÷Ä÷á, ${name}÷â<br/>’á’∂’∏÷Ä’∞’°’Ø’°’¨ ’•’∂÷Ñ ’Ø’°’∫ ’∞’°’Ω’ø’°’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â ’Ñ’•’∂÷Ñ ’Ø’∫’°’ø’°’Ω’≠’°’∂’•’∂÷Ñ ’∞’∂’°÷Ä’°’æ’∏÷Ä’´’∂’Ω ’∑’∏÷Ç’ø÷â</p><p>’Ä’°÷Ä’£’°’∂÷Ñ’∏’æ’ù<br/>ARDA ’©’´’¥</p>`
        });

        res.status(200).json({ message: '’Ü’°’¥’°’Ø’® ’∏÷Ç’≤’°÷Ä’Ø’æ’•’¨ ’ß÷â' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: '’ç’≠’°’¨ ’∂’°’¥’°’Ø ’∏÷Ç’≤’°÷Ä’Ø’•’¨’´’Ω÷â' });
    }
});

// ======== ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∫’°’∂’∏÷Ç’¥/’∏÷Ä’∏’∂’∏÷Ç’¥/’ª’∂’ª’∏÷Ç’¥ ======== //
app.get('/api/backup', (req, res) => {
    try {
        const data = fs.existsSync(backupPath) ? JSON.parse(fs.readFileSync(backupPath, 'utf-8')) : [];
        res.status(200).json({ data });
    } catch (err) {
        console.error('Backup read error:', err);
        res.status(500).json({ message: '’â’∞’°’ª’∏’≤’æ’•÷Å ’Ø’°÷Ä’§’°’¨ ÷Ü’°’µ’¨’®÷â' });
    }
});

app.get('/api/search', (req, res) => {
    const q = (req.query.q || '').toLowerCase();
    try {
        const data = fs.existsSync(backupPath) ? JSON.parse(fs.readFileSync(backupPath, 'utf-8')) : [];
        const filtered = data.filter(r =>
            r.name.toLowerCase().includes(q) ||
            r.phone.toLowerCase().includes(q) ||
            r.email.toLowerCase().includes(q)
        );
        res.json({ data: filtered });
    } catch (err) {
        console.error('Search error:', err);
        res.status(500).json({ message: '’à÷Ä’∏’∂’¥’°’∂ ’Ω’≠’°’¨÷â' });
    }
});

app.delete('/api/registrations', (req, res) => {
    try {
        fs.writeFileSync(backupPath, JSON.stringify([]));
        res.json({ message: '‘≤’∏’¨’∏÷Ä ’£÷Ä’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä’® ’ª’∂’ª’æ’•÷Å’´’∂÷â' });
    } catch (err) {
        console.error('Delete all error:', err);
        res.status(500).json({ message: '’ã’∂’ª’¥’°’∂ ’Ω’≠’°’¨÷â' });
    }
});

app.delete('/api/registrations/delete', (req, res) => {
    const { emails } = req.body;
    if (!Array.isArray(emails)) {
        return res.status(400).json({ message: '’ç’≠’°’¨ ’ø’æ’µ’°’¨’∂’•÷Ä÷â' });
    }

    try {
        const data = fs.existsSync(backupPath) ? JSON.parse(fs.readFileSync(backupPath, 'utf-8')) : [];
        const filtered = data.filter(r => !emails.includes(r.email));
        fs.writeFileSync(backupPath, JSON.stringify(filtered, null, 2));
        res.json({ message: '’Ü’∑’æ’°’Æ ’£÷Ä’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä’® ’ª’∂’ª’æ’•÷Å’´’∂÷â' });
    } catch (err) {
        console.error('Delete selected error:', err);
        res.status(500).json({ message: '’ã’∂’ª’¥’°’∂ ’Ω’≠’°’¨÷â' });
    }
});

const buildPath = path.join(__dirname, '..', 'my_app', 'build');
if (fs.existsSync(buildPath)) {
    app.use(express.static(buildPath));

    // Any route except /api/*
    app.get(/^\/(?!api).*/, (req, res) => {
        res.sendFile(path.join(buildPath, 'index.html'));
    });
} else {
    console.warn('‚ö†Ô∏è Build folder not found at:', buildPath);
}




// ======== ’ç’•÷Ä’æ’•÷Ä’´ ’¥’•’Ø’∂’°÷Ä’Ø ======== //
app.listen(PORT, () => console.log(`üöÄ Server is running on http://localhost:${PORT}`));
